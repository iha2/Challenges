
; (defn heapsort [tree]
;   (letfn [(decider [x non-nil-side other-side]
;                    (if (-> x non-nil-side nil? not)
;                        (let [sorted-branch (heapsort (non-nil-side x))]
;                          (cond
;                            (nil? sorted-branch) x
;                            (<= (:value x) (:value sorted-branch)) (let [swapped (assoc 
;                                                                                  (assoc 
;                                                                                    (assoc x :value (:value sorted-branch)) 
;                                                                                    non-nil-side 
;                                                                                    (assoc sorted-branch :value (:value x))) 
;                                                                                  other-side (-> x other-side heapsort))]
;                                                                           (assoc (assoc swapped :left (heapsort (:left swapped))) :right (heapsort (:right swapped))))
;                            :else (assoc (assoc x non-nil-side sorted-branch) other-side (-> x other-side heapsort)) ))
;                        x))]
;     (decider (decider tree :left :right) :right :left)))